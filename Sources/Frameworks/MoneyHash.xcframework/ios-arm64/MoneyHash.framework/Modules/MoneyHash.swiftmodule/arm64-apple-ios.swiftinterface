// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name MoneyHash
import Foundation
@_exported import MoneyHash
import MoneyHashShared
import Swift
import UIKit
import WebKit
import _Concurrency
public enum MHEnvironment {
  case staging
  case production
  public static func == (a: MoneyHash.MHEnvironment, b: MoneyHash.MHEnvironment) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum MHPaymentStatus {
  case error(errors: [Swift.String])
  case failed(result: MoneyHash.PaymentResult)
  case requireExtraAction(actions: [Swift.String], result: MoneyHash.PaymentResult)
  case success(result: MoneyHash.PaymentResult)
  case unknown
  case cancelled
}
public struct PaymentIntent {
  public let id: Swift.String?
  public let amount: Swift.Double?
  public let amountValue: Swift.String?
  public let currency: Swift.String?
  public let isLive: Swift.Bool?
  public let selectedMethod: Swift.String?
}
public struct PaymentTransaction {
  public let id: Swift.String?
  public let date: Swift.String?
  public let status: Swift.String?
  public let paymentMethod: MoneyHash.PaymentMethod?
  public let billingData: MoneyHash.TransactionBillingData?
  public let customFields: Swift.String?
  public let customFormAnswers: Swift.String?
}
public struct PaymentMethod {
  public let checkoutIcons: [Swift.String]?
  public let paymentMethodName: Swift.String?
  public let paymentMethod: Swift.String?
}
public struct TransactionBillingData {
  public let firstName: Swift.String?
  public let lastName: Swift.String?
  public let email: Swift.String?
  public let phoneNumber: Swift.String?
  public let apartment: Swift.String?
  public let floor: Swift.String?
  public let building: Swift.String?
  public let street: Swift.String?
  public let city: Swift.String?
  public let state: Swift.String?
  public let country: Swift.String?
  public let postalCode: Swift.String?
}
public struct PaymentResult {
  public let intent: MoneyHash.PaymentIntent?
  public let transaction: MoneyHash.PaymentTransaction?
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class MHPaymentViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func loadView()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @objc deinit
}
extension MoneyHash.MHPaymentViewController : WebKit.WKNavigationDelegate, WebKit.WKUIDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFail navigation: WebKit.WKNavigation!, withError error: Swift.Error)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFailProvisionalNavigation navigation: WebKit.WKNavigation!, withError error: Swift.Error)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationAction: WebKit.WKNavigationAction, decisionHandler: @escaping (WebKit.WKNavigationActionPolicy) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, createWebViewWith configuration: WebKit.WKWebViewConfiguration, for navigationAction: WebKit.WKNavigationAction, windowFeatures: WebKit.WKWindowFeatures) -> WebKit.WKWebView?
}
public enum MHPaymentHandler {
  public static func start(on viewController: UIKit.UIViewController, withPaymentId paymentId: Swift.String, completionHandler: @escaping (MoneyHash.MHPaymentStatus) -> Swift.Void)
}
extension MoneyHash.MHEnvironment : Swift.Equatable {}
extension MoneyHash.MHEnvironment : Swift.Hashable {}
